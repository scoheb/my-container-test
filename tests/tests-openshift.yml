- hosts: all
  gather_facts: false
  tags:
  - openshift
  vars:
  - eap_testsuite: "https://gitlab.mw.lab.eng.bos.redhat.com/jbossqe-eap/openshift-eap-tests.git"
  - xtf_repo: "https://github.com/LittleJohnII/xtf.git"
  - intermediate_full_image: "docker-registry.upshift.redhat.com/jbossqe-eap/openshift-tests-intermediate:latest"
  - intermediate_image: "openshift-tests-intermediate"
  - intermediate_deployment: "openshift-tests-intermediate-deployment"
  # these vars are only defaults, and are overriden by the CVP pipeline
  - image_full_name: "registry.access.redhat.com/jboss-eap-7/eap72-openshift:1.0"
  - image_registry_url: "registry.access.redhat.com"
  - image_namespace: "jboss-eap-7"
  - image_name: "eap72-openshift"
  - image_tag: "1.0"
  - openshift_cluster_url: "https://upshift.engineering.redhat.com"
  - openshift_auth_token: ""
  - openshift_username: "developer"
  - openshift_project_name: ""

  tasks:
  - name: "Log in to OpenShift"
    shell: oc login {{ openshift_cluster_url }} --token="{{ openshift_auth_token }}" --insecure-skip-tls-verify

  - name: "Select our project"
    shell: oc project {{ openshift_project_name }}

  - name: "Label service accounts and role bindings, so they don't get destroyed by TS"
    shell:
      cmd: |
        if [[ $(oc get serviceaccount/cvp-product-tester) ]] ; then
          oc label serviceaccounts cvp-product-tester xtf.cz/keep=
        fi
        if [[ $(oc get rolebinding/cvp-admins-admin) ]] ; then
          oc label rolebindings cvp-admins-admin xtf.cz/keep=
        fi
        if [[ $(oc get rolebinding/jbossenterpriseapplicationplatform-jenkins-edit) ]] ; then
          oc label rolebindings cvp-jbossenterpriseapplicationplatform-jenkins-edit xtf.cz/keep=
        fi
        if [[ $(oc get rolebinding/cvp-product-tester-admin) ]] ; then
          oc label rolebindings cvp-product-tester-admin xtf.cz/keep=
        fi

  - name: "Run the intermediate image with the test suite"
    shell:
      cmd: |
        oc run {{ intermediate_deployment }} --image={{ intermediate_full_image }} \
          --env="IMAGE_FULL_NAME={{ image_full_name }}" \
          --env="OPENSHIFT_PROJECT_NAME={{ openshift_project_name }}" \
          --env="OPENSHIFT_CLUSTER_URL={{ openshift_cluster_url }}" \
          --env="OPENSHIFT_AUTH_TOKEN={{ openshift_auth_token }}" \
          --env="OPENSHIFT_USERNAME={{ openshift_username }}" \
          --labels="xtf.cz/keep="

  - name: "Wait the test suite pod to be spawned"
    shell:
      cmd: |
        for i in `seq 1 1200` ; do
          export INT_POD_NAME=`oc get pods --selector deploymentconfig={{ intermediate_deployment }} --output=jsonpath='{ .items[*].metadata.name }'`
          if [[ "${INT_POD_NAME}x" != "x" ]] ; then
            break
          fi
          sleep 6
        done
        echo ${INT_POD_NAME}
    register: ts_pod

  - name: "Wait for the test suite pod to be Running"
    shell:
      cmd: |
        for i in `seq 1 100` ; do
          status=`oc get pods --selector deploymentconfig={{ intermediate_deployment }} | tail -n 1 | awk '{print $3}'`
          if [[ "${status}x" == "Runningx" ]] ; then
            break
          fi
          sleep 6
        done

  - name: "Wait for the test suite to finish"
    shell:
      cmd: |
        rm -f pod-log.txt ; rm -rf pod-logs/* ; mkdir -p pod-logs/
        oc logs -f {{ ts_pod.stdout }} > pod-log.txt &
        for i in `seq 1 900` ; do
          oc get pods --selector deploymentconfig={{ intermediate_deployment }} | grep {{ ts_pod.stdout }}
          pod_running=$?

          if [[ "${pod_running}x" == "0x" ]] ; then
            # these are only for archival in case the streaming fails for whatever reason
            oc logs {{ ts_pod.stdout }} > pod-logs/pod-log-iteration-${i}.txt
          fi

          grep "The test suite is done. Download your artifacts." pod-log.txt
          return_code=$?
          # the "oc logs <pod> -f" can occasionally break, even if the pod is ok, hence:
          grep "The test suite is done. Download your artifacts." pod-logs/pod-log-iteration-${i}.txt
          return_code_2=$?
          if [[ "${return_code}x" == "0x" || "${return_code_2}x" == "0x" ]] ; then
            mv pod-log.txt {{ cvp_artifacts_dir }}/pod-log.txt
            oc get events > {{ cvp_artifacts_dir }}/events.txt
            success=true
            break
          fi

          if [[ "${pod_running}x" != "0x" ]] ; then
            mv pod-log.txt {{ cvp_artifacts_dir }}/pod-log.txt
            mv pod-logs/ {{ cvp_artifacts_dir }}/
            oc get events > {{ cvp_artifacts_dir }}/events.txt
            echo "The pod has been killed before the test suite was done. This needs investigation."
            exit 2
          fi

          sleep 10
        done

        if [[ "${success}x" != "truex" ]] ; then
          mv pod-log.txt {{ cvp_artifacts_dir }}/pod-log.txt
          mv pod-logs/ {{ cvp_artifacts_dir }}/
        fi

  - name: "Copy artifacts from the running image into artifacts dir and show what's been copied"
    block:
    - name: "Copy the artifacts"
      shell: oc rsync {{ ts_pod.stdout }}:/tmp/artifacts/ {{ cvp_artifacts_dir }}/
    - name: "Copy TS logs"
      shell: mkdir -p {{ cvp_artifacts_dir }}/log ; oc rsync {{ ts_pod.stdout }}:/tmp/openshift-eap-tests/test-eap/log/ {{ cvp_artifacts_dir }}/log/
    - name: "Copy target with test results"
      shell: mkdir -p {{ cvp_artifacts_dir }}/target ; oc rsync {{ ts_pod.stdout }}:/tmp/openshift-eap-tests/test-eap/target/ {{ cvp_artifacts_dir }}/target/
    - name: "Copy used image file"
      shell: oc rsync {{ ts_pod.stdout }}:/tmp/openshift-eap-tests/used-images.properties {{ cvp_artifacts_dir }}/ || true
    - name: "Copy used templates file (probably won't exist)"
      shell: oc rsync {{ ts_pod.stdout }}:/tmp/openshift-eap-tests/used-templates.properties {{ cvp_artifacts_dir }}/ || true
    - name: "List the contents of the archive directory"
      shell: ls {{ cvp_artifacts_dir }}/

  - name: "Return error exit code if tests failed, or if something went wrong"
    shell:
      cmd: |
        tests=`grep 'Tests run:' {{ cvp_artifacts_dir }}/test-run.log | tail -n 1 | cut -d, -f1 | cut -d: -f2 | tr -d '[:space:]'`
        failures=`grep 'Tests run:' {{ cvp_artifacts_dir }}/test-run.log | tail -n 1 | cut -d, -f2 | cut -d: -f2 | tr -d '[:space:]'`
        errors=`grep 'Tests run:' {{ cvp_artifacts_dir }}/test-run.log | tail -n 1 | cut -d, -f3 | cut -d: -f2 | tr -d '[:space:]'`
        if [[ "${failures}" != "0" ]] || [[ "${errors}" != "0" ]] || [[ "${tests}" == "0" ]] ; then
          exit 1
        fi

